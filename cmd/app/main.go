package main

import (
	"fmt"
	"net/http"
	"time"
	"log"

	//"os"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	connector "github.com/Leonid-Sarmatov/golang-postgres-web-assistant/internal/postgres/connector"

	cors_headers "github.com/Leonid-Sarmatov/golang-postgres-web-assistant/internal/middlewares/cors_headers"
)

func main() {
	/*f, err := os.Create("./internal/postgres/generated/penis.txt")
	if err != nil {
		panic(err)
	}
	defer f.Close()*/

	c, err := connector.NewPostgresConnector(&connector.Config{
		Host:     "postgres_test",
		Port:     "5432",
		User:     "leonid",
		Password: "password",
		DBname:   "main_database",
	})

	if err != nil {
		fmt.Println("panic 1")
		panic(err)
	}

	c.RequestWithoutResponse(`
		CREATE TABLE IF NOT EXISTS user_table (
			id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
			name VARCHAR(255), 
			age BIGINT
	);`)

	rows, err := c.RequestWithResponse("SELECT * FROM user_table;")
	if err != nil {
		fmt.Println("panic 2")
		panic(err)
	}

	result, err := connector.SqlRowsToSliceOfMap(rows)
	fmt.Println(result)
	if err != nil {
		fmt.Println("panic 3")
		panic(err)
	}

	fmt.Printf("Successfull! Result: %v\n", result)
	fmt.Println("===end===")
	for {

	}

	// Инициализируем роутер
	router := chi.NewRouter()

	// Подключаем готовый middleware для логирования запросов
	router.Use(middleware.Logger)

	// Подключаем готовый middleware, который отлавливает возможные паники,
	// что бы избежать падение приложения
	router.Use(middleware.Recoverer)

	// Подключаем свой moddleware, который подключает CORS заголовки
	// что бы исключить возможные неполадки со стороны браузера
	router.Use(cors_headers.AddCorsHeaders())

	// Эндпоинт для веб панели управления
	router.Get("/webUI", )

	router.Route("/api", func(r chi.Router) {
		// Эндпоинт принимающий запрос на создание нового подключения к базе данных
		r.Get("/createNewConnection", )

		// Эндпоинт принимающий запрос на удаление подключения к базе данных
		r.Get("/deleteConnection", )

		// Эндпоинт принимающий запрос на проверку жизни подключения
		r.Get("/isConnectionAlive", )

		// Эндпоинт принимающий запрос к базе данных 
		r.Post("/sendSqlRequest", )
	})

	// Создаем сервер
	server := &http.Server{
		Addr:         ":8082",
		Handler:      router,
		ReadTimeout:  3 * time.Second,
		WriteTimeout: 3 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	fmt.Println("                Y.                      _             \n" +
				"                YiL                   .```.           \n" +
				"                Yii;                .; .;;`.          \n" +
				"                YY;ii._           .;`.;;;; :          \n" +
				"                iiYYYYYYiiiii;;;;i` ;;::;;;;          \n" +
				"            _.;YYYYYYiiiiiiYYYii  .;;.   ;;;          \n" +
				"         .YYYYYYYYYYiiYYYYYYYYYYYYii;`  ;;;;          \n" +
				"       .YYYYYYY$$YYiiYY$$$$iiiYYYYYY;.ii;`..          \n" +
				"      :YYY$!.  TYiiYY$$$$$YYYYYYYiiYYYYiYYii.         \n" +
				"      Y$MM$:   :YYYYYY$! `` 4YYYYYiiiYYYYiiYY.        \n" +
				"   `. :MM$$b.,dYY$$Yii  :'   :YYYYllYiiYYYiYY         \n" +
				"_.._ :`4MM$!YYYYYYYYYii,.__.diii$$YYYYYYYYYYY         \n" +
				".,._ $b`P`      4$$$$$iiiiiiii$$$$YY$$$$$$YiY;        \n" +
				"   `,.`$:       :$$$$$$$$$YYYYY$$$$$$$$$YYiiYYL       \n" +
				"     `;$$.    .;PPb$`.,.``T$$YY$$$$YYYYYYiiiYYU:      \n" +
				"    ;$P$;;: ;;;;i$y$ !Y$$$b;$$$Y$YY$$YYYiiiYYiYY      \n" +
				"    $Fi$$ .. ``:iii.`- :YYYYY$$YY$$$$$YYYiiYiYYY      \n" +
				"    :Y$$rb ````  `_..;;i;YYY$YY$$$$$$$YYYYYYYiYY:     \n" +
				"     :$$$$$i;;iiiiidYYYYYYYYYY$$$$$$YYYYYYYiiYYYY.    \n" +
				"      `$$$$$$$YYYYYYYYYYYYY$$$$$$YYYYYYYYiiiYYYYYY    \n" +
				"      .i!$$$$$$YYYYYYYYY$$$$$$YYY$$YYiiiiiiYYYYYYY    \n" +
				"     :YYiii$$$$$$$YYYYYYY$$$$YY$$$$YYiiiiiYYYYYYi'    ")

	// Запускаем сервер
	if err := server.ListenAndServe(); err != nil {
		log.Printf("Server was stoped")
	}
}
